Copyright (C) Internet Systems Consortium, Inc. ("ISC")

See COPYRIGHT in the source root or http://isc.org/copyright.html for terms.

# DNSSEC Key and Signing Policy

A DNSSEC key and signing policy (KASP) defines a DNSSEC policy that can be
applied to one or more zones.

For some background information, see:

    https://www.ietf.org/archive/id/draft-mekking-dnsop-kasp-00.txt

# DNSSEC in BIND 9

DNSSEC is first implemented in BIND 9.  Many adaptations have been made since
then.  A lot of configuration knobs were added.  One aim with introducing KASP
configuration is that all these configuration options are grouped together.
Instead of configuring many different options per zone, you would be able to
do the following:

zone "example.com." {
    ...
    dnssec-policy "nsec3";
};

TODO: Explain how DNSSEC automated maintenance is done now.


## Existing DNSSEC configuration options

### Signing

The following configuration options exist nowadays for `named` to maintain
DNSSEC signed zones.  These will no longer work if an explicit DNSSEC policy
is set for a zone.

1. `auto-dnssec`: When setting a DNSSEC policy for a zone instead, the
   behavior will be as if `auto-dnssec` was set to `maintain`.

1. `dnskey-sig-validity`: This option will be replaced in favor of the KASP
   configuration value `signatures-validity-dnskey`.

1. `dnssec-dnskey-kskonly`: This option will be removed and the key
   configuration from the policy will be used to determine what RRsets will be
   signed with which keys (Keys will have a role "KSK" and/or "ZSK", more on
   that later).

1. `dnssec-loadkeys-interval`: This option will determine how the period that
   BIND 9 will check its key repository (default once per hour) to see if
   there are new keys added or if existing keys metadata has changed.  This
   option actually can go away because the entity that performs DNSSEC
   maintenance knows exactly when the next step needs to happen.  This does
   mean that whenever a new key is added or deprecated manually, the timers
   need to be updated.

1. `dnssec-secure-to-insecure`: This option allows a dynamic zone to
   transition from secure to insecure.  This seems to be a safety check
   when named is not responsible for signing.  This will likely go away
   because explicitly removing the dnssec-policy will be the same signal
   to (safely) make the zone insecure.

1. `dnssec-update-mode`: This option determines how DNSSEC signed dynamic
   zones are updated. Default is `maintain` and it is unclear how it is
   different from `auto-dnssec`.  With KASP, the behavior will be as if
   the `dnssec-update-mode` was set to `maintain`.  If you want DNSSEC
   maintenance to be done outside `named`, you should not configure a
   `dnssec-policy` for that zone.

1. `inline-signing`:  When set to "yes", this option will sign incoming
   unsigned zones.  This is also no longer needed when KASP is introduced
   because when setting a `dnssec-policy` for a secondary zone this indicates
   that `inline-signing` is desired.  Basically `inline-signing` is the 
   `auto-dnssec` for zones with a hidden master.

1. `max-zone-ttl`: This will cap all TTLs in a zone file to the specified
    value. Although this option may be used for non-DNSSEC zones, it is really
    only useful for DNSSEC-signed zones because when performing key rollovers
    the timing depends on the largest TTL in the zone.

1. `sig-signing-nodes`: This specifies the number of nodes to be examined
   in a quantum when signing a zone with a new DNSKEY. Why? This needs to go.

1. `sig-signing-signatures`: This specifies a threshold number of how many
   signatures will be generated in a quantum. What?

1. `sig-signing-type`: Internal record type number, used to track zone
   signing process.  This likely will go away in favor of a new method.

1. `sig-validity-interval`: Specifies the number of days a signature is valid.
   The second optional value is the refresh interval. Thos option will
   be replaced by KASP configuration values "signatures-validity" and
   "signatures-refresh".

1. `update-check-ksk`: When set to "no", KSK will also sign non-DNSKEY RRsets.
   This option will go away and key roles will be used to determine what
   keys sign which RRsets (A KSK that should sign all RRsets will have both
   the KSK and ZSK role and is referred to as a CSK).

Other DNSSEC related configuration options that are not related to the policy
are likely to stay:

1. `key-directory`: This is where the DNSKEY key files can be found.

1. `serial-update-method`: This is used for dynamic zones to determne how
   the SOA SERIAL should be updated.  There will likely be a separate
   configuration option for the serial update method when resigning a zone.


### Validation

Out of scope


# KASP Configuration

The KASP Configuration may look something like the example configuration
below. This includes all options as described in the KASP draft, but we may
decide that some options are not required.

```
keystore "softhsm" {
    module "/usr/local/lib/libsofthsm.so";
    tokenlabel "BIND9";
    pin "1234";
    capacity 1000;
    require-backup no;
    skip-public-key yes;
};

dnssecpolicy "nsec3" {

    description "policy for zones that require zone walking mitigation";

    // Signatures
    signatures-resign PT2H;
    signatures-refresh P3D;
    signatures-validity P14D;
    signatures-validity-dnskey P14D;
    signatures-validity-denial P7D;
    signatures-jitter PT12H;
    signatures-inception-offset PT300S;

    // Denial of existence
    denial-type nsec3;
    nsec3param-ttl 0;
    nsec3-optout no;
    nsec3-hash-algorithm 1;
    nsec3-hash-iterations 5;
    nsec3-salt-length 8;
    nsec3-resalt P100D;

    // Keys
    dnskey-ttl 3600;
    dnskey-publish-safety PT3600S;
    dnskey-retire-safety PT3600S;
    share-keys no;
    purge-keys-after P14D;

    keys {
	ksk hsm "softhsm" \
		P1Y offline manual ECDSAP256SHA256;
	zsk directory "/etc/bind9/dnsseckeys/" \
		P30D online automatic ECDSAP256SHA256;
    };

    // Parent synchronization
    cds yes;
    cdnskey yes;
    check-ds { 127.0.0.53; };
    check-ds-interval PT3600S;

    // Zone properties
    zone-propagation-delay PT3600S;
    zone-soa-ttl 3600;
    zone-soa-minimum 3600;
    zone-soa-serial-update-method unixtime;
    zone-max-ttl 24H;

    // Parent properties
    parent-propagation-delay PT24H;
    parent-ds-ttl 3600;
    parent-soa-ttl 3600;
    parent-soa-minimum 3600;
};
```

# KASP Database

Current strategy is to maintain information in comments in keyfiles:

```
; This is a key-signing key, keyid 52075, for test.
; Created: 20190612091648 (Wed Jun 12 11:16:48 2019)
; Publish: 20190612091648 (Wed Jun 12 11:16:48 2019)
; Activate: 20190612091648 (Wed Jun 12 11:16:48 2019)
```

This by itself is good enough to maintain signatures (where the signature
lifetime can be set in named.conf), but key rollovers are maintained with
a separate tool `dnssec-keymgr` which wraps around `dnssec-keygen` and
`dnssec-settime`.

There are several options with the new approach to store state information:

- Extend on the current strategy, store lifetime and other related timing
  information in the keyfiles.

- Store information in a database backend.  More work, but likely better
  performance when signing and maintaing many zones, and a better relationship
  between policies, zones, and keys.

# Strategy

1. Introduce the new named.conf options.
2. Implement checks, so that dnssec-policy and existing DNSSEC sign options
   cannot coexist.
3. Implement the behavior of the new options.
4. Implement KASP Database.

